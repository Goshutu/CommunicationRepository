//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumanResources.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Company : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Company_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExperienceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SalaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime Starting_dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Vacation_daysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Company_id {
            get {
                return this.Company_idField;
            }
            set {
                if ((this.Company_idField.Equals(value) != true)) {
                    this.Company_idField = value;
                    this.RaisePropertyChanged("Company_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Experience {
            get {
                return this.ExperienceField;
            }
            set {
                if ((this.ExperienceField.Equals(value) != true)) {
                    this.ExperienceField = value;
                    this.RaisePropertyChanged("Experience");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Salary {
            get {
                return this.SalaryField;
            }
            set {
                if ((this.SalaryField.Equals(value) != true)) {
                    this.SalaryField = value;
                    this.RaisePropertyChanged("Salary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Starting_date {
            get {
                return this.Starting_dateField;
            }
            set {
                if ((this.Starting_dateField.Equals(value) != true)) {
                    this.Starting_dateField = value;
                    this.RaisePropertyChanged("Starting_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Vacation_days {
            get {
                return this.Vacation_daysField;
            }
            set {
                if ((this.Vacation_daysField.Equals(value) != true)) {
                    this.Vacation_daysField = value;
                    this.RaisePropertyChanged("Vacation_days");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCompanies", ReplyAction="http://tempuri.org/IService1/GetAllCompaniesResponse")]
        HumanResources.ServiceReference1.Company[] GetAllCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCompanies", ReplyAction="http://tempuri.org/IService1/GetAllCompaniesResponse")]
        System.Threading.Tasks.Task<HumanResources.ServiceReference1.Company[]> GetAllCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCompany", ReplyAction="http://tempuri.org/IService1/AddCompanyResponse")]
        bool AddCompany(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCompany", ReplyAction="http://tempuri.org/IService1/AddCompanyResponse")]
        System.Threading.Tasks.Task<bool> AddCompanyAsync(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCompany", ReplyAction="http://tempuri.org/IService1/DeleteCompanyResponse")]
        bool DeleteCompany(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCompany", ReplyAction="http://tempuri.org/IService1/DeleteCompanyResponse")]
        System.Threading.Tasks.Task<bool> DeleteCompanyAsync(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeesPerComapny", ReplyAction="http://tempuri.org/IService1/GetAllEmployeesPerComapnyResponse")]
        HumanResources.ServiceReference1.Employee[] GetAllEmployeesPerComapny(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeesPerComapny", ReplyAction="http://tempuri.org/IService1/GetAllEmployeesPerComapnyResponse")]
        System.Threading.Tasks.Task<HumanResources.ServiceReference1.Employee[]> GetAllEmployeesPerComapnyAsync(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployee", ReplyAction="http://tempuri.org/IService1/AddEmployeeResponse")]
        bool AddEmployee(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployee", ReplyAction="http://tempuri.org/IService1/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditEmployee", ReplyAction="http://tempuri.org/IService1/EditEmployeeResponse")]
        bool EditEmployee(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditEmployee", ReplyAction="http://tempuri.org/IService1/EditEmployeeResponse")]
        System.Threading.Tasks.Task<bool> EditEmployeeAsync(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        bool DeleteEmployee(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(HumanResources.ServiceReference1.Employee employee);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : HumanResources.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<HumanResources.ServiceReference1.IService1>, HumanResources.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HumanResources.ServiceReference1.Company[] GetAllCompanies() {
            return base.Channel.GetAllCompanies();
        }
        
        public System.Threading.Tasks.Task<HumanResources.ServiceReference1.Company[]> GetAllCompaniesAsync() {
            return base.Channel.GetAllCompaniesAsync();
        }
        
        public bool AddCompany(HumanResources.ServiceReference1.Company company) {
            return base.Channel.AddCompany(company);
        }
        
        public System.Threading.Tasks.Task<bool> AddCompanyAsync(HumanResources.ServiceReference1.Company company) {
            return base.Channel.AddCompanyAsync(company);
        }
        
        public bool DeleteCompany(HumanResources.ServiceReference1.Company company) {
            return base.Channel.DeleteCompany(company);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCompanyAsync(HumanResources.ServiceReference1.Company company) {
            return base.Channel.DeleteCompanyAsync(company);
        }
        
        public HumanResources.ServiceReference1.Employee[] GetAllEmployeesPerComapny(HumanResources.ServiceReference1.Company company) {
            return base.Channel.GetAllEmployeesPerComapny(company);
        }
        
        public System.Threading.Tasks.Task<HumanResources.ServiceReference1.Employee[]> GetAllEmployeesPerComapnyAsync(HumanResources.ServiceReference1.Company company) {
            return base.Channel.GetAllEmployeesPerComapnyAsync(company);
        }
        
        public bool AddEmployee(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public bool EditEmployee(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.EditEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> EditEmployeeAsync(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.EditEmployeeAsync(employee);
        }
        
        public bool DeleteEmployee(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.DeleteEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.DeleteEmployeeAsync(employee);
        }
    }
}
