//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumanResourcesTests.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCompanies", ReplyAction="http://tempuri.org/IService1/GetAllCompaniesResponse")]
        HumanResources.ServiceReference1.Company[] GetAllCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCompanies", ReplyAction="http://tempuri.org/IService1/GetAllCompaniesResponse")]
        System.Threading.Tasks.Task<HumanResources.ServiceReference1.Company[]> GetAllCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCompany", ReplyAction="http://tempuri.org/IService1/AddCompanyResponse")]
        bool AddCompany(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCompany", ReplyAction="http://tempuri.org/IService1/AddCompanyResponse")]
        System.Threading.Tasks.Task<bool> AddCompanyAsync(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCompany", ReplyAction="http://tempuri.org/IService1/DeleteCompanyResponse")]
        bool DeleteCompany(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCompany", ReplyAction="http://tempuri.org/IService1/DeleteCompanyResponse")]
        System.Threading.Tasks.Task<bool> DeleteCompanyAsync(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeesPerComapny", ReplyAction="http://tempuri.org/IService1/GetAllEmployeesPerComapnyResponse")]
        HumanResources.ServiceReference1.Employee[] GetAllEmployeesPerComapny(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployeesPerComapny", ReplyAction="http://tempuri.org/IService1/GetAllEmployeesPerComapnyResponse")]
        System.Threading.Tasks.Task<HumanResources.ServiceReference1.Employee[]> GetAllEmployeesPerComapnyAsync(HumanResources.ServiceReference1.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployee", ReplyAction="http://tempuri.org/IService1/AddEmployeeResponse")]
        bool AddEmployee(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEmployee", ReplyAction="http://tempuri.org/IService1/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditEmployee", ReplyAction="http://tempuri.org/IService1/EditEmployeeResponse")]
        bool EditEmployee(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditEmployee", ReplyAction="http://tempuri.org/IService1/EditEmployeeResponse")]
        System.Threading.Tasks.Task<bool> EditEmployeeAsync(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        bool DeleteEmployee(HumanResources.ServiceReference1.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(HumanResources.ServiceReference1.Employee employee);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : HumanResourcesTests.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<HumanResourcesTests.ServiceReference1.IService1>, HumanResourcesTests.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HumanResources.ServiceReference1.Company[] GetAllCompanies() {
            return base.Channel.GetAllCompanies();
        }
        
        public System.Threading.Tasks.Task<HumanResources.ServiceReference1.Company[]> GetAllCompaniesAsync() {
            return base.Channel.GetAllCompaniesAsync();
        }
        
        public bool AddCompany(HumanResources.ServiceReference1.Company company) {
            return base.Channel.AddCompany(company);
        }
        
        public System.Threading.Tasks.Task<bool> AddCompanyAsync(HumanResources.ServiceReference1.Company company) {
            return base.Channel.AddCompanyAsync(company);
        }
        
        public bool DeleteCompany(HumanResources.ServiceReference1.Company company) {
            return base.Channel.DeleteCompany(company);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCompanyAsync(HumanResources.ServiceReference1.Company company) {
            return base.Channel.DeleteCompanyAsync(company);
        }
        
        public HumanResources.ServiceReference1.Employee[] GetAllEmployeesPerComapny(HumanResources.ServiceReference1.Company company) {
            return base.Channel.GetAllEmployeesPerComapny(company);
        }
        
        public System.Threading.Tasks.Task<HumanResources.ServiceReference1.Employee[]> GetAllEmployeesPerComapnyAsync(HumanResources.ServiceReference1.Company company) {
            return base.Channel.GetAllEmployeesPerComapnyAsync(company);
        }
        
        public bool AddEmployee(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public bool EditEmployee(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.EditEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> EditEmployeeAsync(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.EditEmployeeAsync(employee);
        }
        
        public bool DeleteEmployee(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.DeleteEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(HumanResources.ServiceReference1.Employee employee) {
            return base.Channel.DeleteEmployeeAsync(employee);
        }
    }
}
